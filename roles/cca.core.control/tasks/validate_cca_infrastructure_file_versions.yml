---
# tasks file for cca.core.control
#
# Description: Validate template file versions for infrastructure files.
#              This task can be executed against all hosts of as part of a
#              infrastructure playbook.
#
# Prerequisite: None
#
# Author: Roger Lindquist (github.com/rlinq)
#
# Release: 2023.3.2

- name: Assert file version in infrastructure repo files
  run_once: true
  ansible.builtin.assert:
    that:
      - "hostvars[loop_inventory_hostname][item.parameter_name] is version(item.version, '>=')"
    fail_msg:
      "Your {{ item.parameter_name }} is {{ hostvars[loop_inventory_hostname][item.parameter_name] }} where it should be {{ item.version }}.
      Please compare your file in environments/{{ environment_name }}/{{ item.file_name }} with the file in the
      template directory and do necessary updates"
  loop:
    - { 'file_name': 'group_vars/all/general_settings', 'parameter_name': 'cca_infrastructure_general_settings_file_version', 'version': '2023.1.1' }
    - { 'file_name': 'group_vars/all/cca_splunk_settings', 'parameter_name': 'cca_infrastructure_settings_file_version', 'version': '2022.2.1' }
    - { 'file_name': 'group_vars/all/defaults', 'parameter_name': 'cca_infrastructure_defaults_file_version', 'version': '2023.1.1' }
    - { 'file_name': 'group_vars/all/general_settings', 'parameter_name': 'cca_infrastructure_general_settings_file_version', 'version': '2023.1.1' }
    - { 'file_name': 'group_vars/all/linux', 'parameter_name': 'cca_infrastructure_linux_file_version', 'version': '2022.2.1' }
    - { 'file_name': 'group_vars/all/env_specific', 'parameter_name': 'cca_infrastructure_env_specific_file_version', 'version': '2022.3.1' }
    - { 'file_name': 'hosts', 'parameter_name': 'cca_infrastructure_hosts_file_version', 'version': '2023.1.1' }
  ignore_errors: true
  register: infrastructure_assert_result_all
  when:
    - hostvars[loop_inventory_hostname][item.parameter_name] is defined
    - inventory_hostname == 'localhost'
    - not infrastructure_assert_result_all_summary is defined

- name: Set fact if assert failed, to be used in final assert
  ansible.builtin.set_fact:
    infrastructure_assert_failed: true
    infrastructure_assert_result_all_summary:
      reason: "{{ infrastructure_assert_result_all_summary.reason | default([]) | list + [item.msg] }}"
  with_items:
    - "{{ infrastructure_assert_result_all.results }}"
  when:
    - item.failed is defined
    - item.failed

- name: Assert file version for group vars related to cluster_manager_cluster_c1
  delegate_to: "{{ loop_inventory_hostname }}"
  run_once: true
  ansible.builtin.assert:
    that:
      - "hostvars[loop_inventory_hostname][item.parameter_name] is version(item.version, '>=')"
    fail_msg:
      "Your {{ item.parameter_name }} is {{ hostvars[loop_inventory_hostname][item.parameter_name] }} where it should be {{ item.version }}.
      Please compare your file in environments/{{ environment_name }}/{{ item.file_name }} with the file in the
      template directory and do necessary updates"
  loop:
    - { 'file_name': 'group_vars/cluster_manager_cluster_c1 ',
        'parameter_name': 'cca_infrastructure_cluster_manager_cluster_c1_file_version',
        'version': '2023.2.1'
    }
  ignore_errors: true
  register: infrastructure_assert_result_cluster_manager_cluster_c1
  when:
    - loop_inventory_hostname in ( groups.cluster_manager_cluster_c1 | default([]) )
    - hostvars[loop_inventory_hostname][item.parameter_name] is defined

- name: Set fact if assert failed, to be used in final assert
  ansible.builtin.set_fact:
    infrastructure_assert_failed: true
    infrastructure_assert_result_cluster_manager_cluster_c1_summary:
      reason: "{{ item.msg }}"
  with_items:
    - "{{ infrastructure_assert_result_cluster_manager_cluster_c1.results }}"
  when:
    - item.failed is defined
    - item.failed

- name: Assert file version for group vars file
  delegate_to: "{{ loop_inventory_hostname }}"
  run_once: true
  ansible.builtin.assert:
    that:
      - "hostvars[loop_inventory_hostname][item.parameter_name] is version(item.version, '>=')"
    fail_msg:
      "Your {{ item.parameter_name }} is {{ hostvars[loop_inventory_hostname][item.parameter_name] }} where it should be {{ item.version }}.
      Please compare your file in environments/{{ environment_name }}/{{ item.file_name }} with the file in the
      template directory and do necessary updates"
  loop:
    - { 'file_name': 'group_vars/cluster_manager_cluster_c2',
        'parameter_name': 'cca_infrastructure_cluster_manager_cluster_c2_file_version',
        'version': '2023.2.1'
    }
  ignore_errors: true
  register: infrastructure_assert_result_cluster_manager_cluster_c2
  when:
    - loop_inventory_hostname in ( groups.cluster_manager_cluster_c2 | default([]) )
    - hostvars[loop_inventory_hostname][item.parameter_name] is defined

- name: Set fact if assert failed, to be used in final assert
  ansible.builtin.set_fact:
    infrastructure_assert_failed: true
    infrastructure_assert_result_cluster_manager_cluster_c2_summary:
      reason: "{{ item.msg }}"
  with_items:
    - "{{ infrastructure_assert_result_cluster_manager_cluster_c2.results }}"
  when:
    - item.failed is defined
    - item.failed

- name: Assert file version for group vars file
  delegate_to: "{{ loop_inventory_hostname }}"
  run_once: true
  ansible.builtin.assert:
    that:
      - "hostvars[loop_inventory_hostname][item.parameter_name] is version(item.version, '>=')"
    fail_msg:
      "Your {{ item.parameter_name }} is {{ hostvars[loop_inventory_hostname][item.parameter_name] }} where it should be {{ item.version }}.
      Please compare your file in environments/{{ environment_name }}/{{ item.file_name }} with the file in the
      template directory and do necessary updates"
  loop:
    - { 'file_name': 'group_vars/cluster_peers_cluster_c1',
        'parameter_name': 'cca_infrastructure_cluster_peers_cluster_c1_file_version',
        'version': '2023.1.1'
    }
  ignore_errors: true
  register: infrastructure_assert_result_cluster_peers_cluster_c1
  when:
    - loop_inventory_hostname in ( groups.cluster_peers_cluster_c1 | default([]) )
    - hostvars[loop_inventory_hostname][item.parameter_name] is defined

- name: Set fact if assert failed, to be used in final assert
  ansible.builtin.set_fact:
    infrastructure_assert_failed: true
    infrastructure_assert_result_cluster_peers_cluster_c1_summary:
      reason: "{{ item.msg }}"
  with_items:
    - "{{ infrastructure_assert_result_cluster_peers_cluster_c1.results }}"
  when:
    - item.failed is defined
    - item.failed

- name: Assert file version for group vars file
  delegate_to: "{{ loop_inventory_hostname }}"
  run_once: true
  ansible.builtin.assert:
    that:
      - "hostvars[loop_inventory_hostname][item.parameter_name] is version(item.version, '>=')"
    fail_msg:
      "Your {{ item.parameter_name }} is {{ hostvars[loop_inventory_hostname][item.parameter_name] }} where it should be {{ item.version }}.
      Please compare your file in environments/{{ environment_name }}/{{ item.file_name }} with the file in the
      template directory and do necessary updates"
  loop:
    - { 'file_name': 'group_vars/cluster_peers_cluster_c2',
        'parameter_name': 'cca_infrastructure_cluster_peers_cluster_c2_file_version',
        'version': '2023.1.1'
    }
  ignore_errors: true
  register: infrastructure_assert_result_cluster_peers_cluster_c2
  when:
    - loop_inventory_hostname in ( groups.cluster_peers_cluster_c2 | default([]) )
    - hostvars[loop_inventory_hostname][item.parameter_name] is defined

- name: Set fact if assert failed, to be used in final assert
  ansible.builtin.set_fact:
    infrastructure_assert_failed: true
    infrastructure_assert_result_cluster_peers_cluster_c2_summary:
      reason: "{{ item.msg }}"
  with_items:
    - "{{ infrastructure_assert_result_cluster_peers_cluster_c2.results }}"
  when:
    - item.failed is defined
    - item.failed

- name: Assert file version for group vars file
  delegate_to: "{{ loop_inventory_hostname }}"
  run_once: true
  ansible.builtin.assert:
    that:
      - "hostvars[loop_inventory_hostname][item.parameter_name] is version(item.version, '>=')"
    fail_msg:
      "Your {{ item.parameter_name }} is {{ hostvars[loop_inventory_hostname][item.parameter_name] }} where it should be {{ item.version }}.
      Please compare your file in environments/{{ environment_name }}/{{ item.file_name }} with the file in the
      template directory and do necessary updates"
  loop:
    - { 'file_name': 'group_vars/data_collection_nodes',
        'parameter_name': 'cca_infrastructure_data_collection_nodes_file_version',
        'version': '2023.1.1'
    }
  ignore_errors: true
  register: infrastructure_assert_result_data_collection_nodes
  when:
    - loop_inventory_hostname in ( groups.data_collection_nodes | default([]) )
    - hostvars[loop_inventory_hostname][item.parameter_name] is defined

- name: Set fact if assert failed, to be used in final assert
  ansible.builtin.set_fact:
    infrastructure_assert_failed: true
    infrastructure_assert_result_data_collection_nodes_summary:
      reason: "{{ item.msg }}"
  with_items:
    - "{{ infrastructure_assert_result_data_collection_nodes.results }}"
  when:
    - item.failed is defined
    - item.failed

- name: Assert file version for group vars file
  delegate_to: "{{ loop_inventory_hostname }}"
  run_once: true
  ansible.builtin.assert:
    that:
      - "hostvars[loop_inventory_hostname][item.parameter_name] is version(item.version, '>=')"
    fail_msg:
      "Your {{ item.parameter_name }} is {{ hostvars[loop_inventory_hostname][item.parameter_name] }} where it should be {{ item.version }}.
      Please compare your file in environments/{{ environment_name }}/{{ item.file_name }} with the file in the
      template directory and do necessary updates"
  loop:
    - { 'file_name': 'group_vars/deployment_servers',
        'parameter_name': 'cca_infrastructure_deployment_servers_file_version',
        'version': '2023.1.1'
    }
  ignore_errors: true
  register: infrastructure_assert_result_deployment_servers
  when:
    - loop_inventory_hostname in ( groups.deployment_servers | default([]) )
    - hostvars[loop_inventory_hostname][item.parameter_name] is defined

- name: Set fact if assert failed, to be used in final assert
  ansible.builtin.set_fact:
    infrastructure_assert_failed: true
    infrastructure_assert_result_deployment_servers_summary:
      reason: "{{ item.msg }}"
  with_items:
    - "{{ infrastructure_assert_result_deployment_servers.results }}"
  when:
    - item.failed is defined
    - item.failed

- name: Assert file version for group vars file
  delegate_to: "{{ loop_inventory_hostname }}"
  run_once: true
  ansible.builtin.assert:
    that:
      - "hostvars[loop_inventory_hostname][item.parameter_name] is version(item.version, '>=')"
    fail_msg:
      "Your {{ item.parameter_name }} is {{ hostvars[loop_inventory_hostname][item.parameter_name] }} where it should be {{ item.version }}.
      Please compare your file in environments/{{ environment_name }}/{{ item.file_name }} with the file in the
      template directory and do necessary updates"
  loop:
    - { 'file_name': 'group_vars/forwarders',
        'parameter_name': 'cca_infrastructure_forwarders_file_version',
        'version': '2023.1.1'
    }
  ignore_errors: true
  register: infrastructure_assert_result_forwarders
  when:
    - loop_inventory_hostname in ( groups.forwarders | default([]) )
    - hostvars[loop_inventory_hostname][item.parameter_name] is defined

- name: Set fact if assert failed, to be used in final assert
  ansible.builtin.set_fact:
    infrastructure_assert_failed: true
    infrastructure_assert_result_forwarders_summary:
      reason: "{{ item.msg }}"
  with_items:
    - "{{ infrastructure_assert_result_forwarders.results }}"
  when:
    - item.failed is defined
    - item.failed

- name: Assert file version for group vars file
  delegate_to: "{{ loop_inventory_hostname }}"
  run_once: true
  ansible.builtin.assert:
    that:
      - "hostvars[loop_inventory_hostname][item.parameter_name] is version(item.version, '>=')"
    fail_msg:
      "Your {{ item.parameter_name }} is {{ hostvars[loop_inventory_hostname][item.parameter_name] }} where it should be {{ item.version }}.
      Please compare your file in environments/{{ environment_name }}/{{ item.file_name }} with the file in the
      template directory and do necessary updates"
  loop:
    - { 'file_name': 'group_vars/hybrid_searchheads',
        'parameter_name': 'cca_infrastructure_hybrid_searchheads_file_version',
        'version': '2023.1.1'
    }
  ignore_errors: true
  register: infrastructure_assert_result_hybrid_searchheads
  when:
    - loop_inventory_hostname in ( groups.hybrid_searchheads | default([]) )
    - hostvars[loop_inventory_hostname][item.parameter_name] is defined

- name: Set fact if assert failed, to be used in final assert
  ansible.builtin.set_fact:
    infrastructure_assert_failed: true
    infrastructure_assert_result_hybrid_searchheads_summary:
      reason: "{{ item.msg }}"
  with_items:
    - "{{ infrastructure_assert_result_hybrid_searchheads.results }}"
  when:
    - item.failed is defined
    - item.failed

- name: Assert file version for group vars file
  delegate_to: "{{ loop_inventory_hostname }}"
  run_once: true
  ansible.builtin.assert:
    that:
      - "hostvars[loop_inventory_hostname][item.parameter_name] is version(item.version, '>=')"
    fail_msg:
      "Your {{ item.parameter_name }} is {{ hostvars[loop_inventory_hostname][item.parameter_name] }} where it should be {{ item.version }}.
      Please compare your file in environments/{{ environment_name }}/{{ item.file_name }} with the file in the
      template directory and do necessary updates"
  loop:
    - { 'file_name': 'group_vars/license_managers',
        'parameter_name': 'cca_infrastructure_license_managers_file_version',
        'version': '2023.1.1'
    }
  ignore_errors: true
  register: infrastructure_assert_result_license_managers
  when:
    - loop_inventory_hostname in ( groups.license_managers | default([]) )
    - hostvars[loop_inventory_hostname][item.parameter_name] is defined

- name: Set fact if assert failed, to be used in final assert
  ansible.builtin.set_fact:
    infrastructure_assert_failed: true
    infrastructure_assert_result_license_managers_summary:
      reason: "{{ item.msg }}"
  with_items:
    - "{{ infrastructure_assert_result_license_managers.results }}"
  when:
    - item.failed is defined
    - item.failed

- name: Assert file version for group vars file
  delegate_to: "{{ loop_inventory_hostname }}"
  run_once: true
  ansible.builtin.assert:
    that:
      - "hostvars[loop_inventory_hostname][item.parameter_name] is version(item.version, '>=')"
    fail_msg:
      "Your {{ item.parameter_name }} is {{ hostvars[loop_inventory_hostname][item.parameter_name] }} where it should be {{ item.version }}.
      Please compare your file in environments/{{ environment_name }}/{{ item.file_name }} with the file in the
      template directory and do necessary updates"
  loop:
    - { 'file_name': 'group_vars/monitoring_consoles',
        'parameter_name': 'cca_infrastructure_monitoring_consoles_file_version',
        'version': '2023.1.1'
    }
  ignore_errors: true
  register: infrastructure_assert_result_monitoring_consoles
  when:
    - loop_inventory_hostname in ( groups.monitoring_consoles | default([]) )
    - hostvars[loop_inventory_hostname][item.parameter_name] is defined

- name: Set fact if assert failed, to be used in final assert
  ansible.builtin.set_fact:
    infrastructure_assert_failed: true
    infrastructure_assert_result_monitoring_consoles_summary:
      reason: "{{ item.msg }}"
  with_items:
    - "{{ infrastructure_assert_result_monitoring_consoles.results }}"
  when:
    - item.failed is defined
    - item.failed

- name: Assert file version for group vars file
  delegate_to: "{{ loop_inventory_hostname }}"
  run_once: true
  ansible.builtin.assert:
    that:
      - "hostvars[loop_inventory_hostname][item.parameter_name] is version(item.version, '>=')"
    fail_msg:
      "Your {{ item.parameter_name }} is {{ hostvars[loop_inventory_hostname][item.parameter_name] }} where it should be {{ item.version }}.
      Please compare your file in environments/{{ environment_name }}/{{ item.file_name }} with the file in the
      template directory and do necessary updates"
  loop:
    - { 'file_name': 'group_vars/searchhead_deployer_shcluster_c1',
        'parameter_name': 'cca_infrastructure_searchhead_deployer_shcluster_c1_file_version',
        'version': '2023.1.1'
    }
  ignore_errors: true
  register: infrastructure_assert_result_searchhead_deployer_shcluster_c1
  when:
    - loop_inventory_hostname in ( groups.searchhead_deployer_shcluster_c1 | default([]) )
    - hostvars[loop_inventory_hostname][item.parameter_name] is defined

- name: Set fact if assert failed, to be used in final assert
  ansible.builtin.set_fact:
    infrastructure_assert_failed: true
    infrastructure_assert_result_searchhead_deployer_shcluster_c1_summary:
      reason: "{{ item.msg }}"
  with_items:
    - "{{ infrastructure_assert_result_searchhead_deployer_shcluster_c1.results }}"
  when:
    - item.failed is defined
    - item.failed

- name: Assert file version for group vars file
  delegate_to: "{{ loop_inventory_hostname }}"
  run_once: true
  ansible.builtin.assert:
    that:
      - "hostvars[loop_inventory_hostname][item.parameter_name] is version(item.version, '>=')"
    fail_msg:
      "Your {{ item.parameter_name }} is {{ hostvars[loop_inventory_hostname][item.parameter_name] }} where it should be {{ item.version }}.
      Please compare your file in environments/{{ environment_name }}/{{ item.file_name }} with the file in the
      template directory and do necessary updates"
  loop:
    - { 'file_name': 'group_vars/searchhead_deployer_shcluster_c2',
        'parameter_name': 'cca_infrastructure_searchhead_deployer_shcluster_c2_file_version',
        'version': '2023.1.1'
    }
  ignore_errors: true
  register: infrastructure_assert_result_searchhead_deployer_shcluster_c2
  when:
    - loop_inventory_hostname in ( groups.searchhead_deployer_shcluster_c2 | default([]) )
    - hostvars[loop_inventory_hostname][item.parameter_name] is defined

- name: Set fact if assert failed, to be used in final assert
  ansible.builtin.set_fact:
    infrastructure_assert_failed: true
    infrastructure_assert_result_searchhead_deployer_shcluster_c2_summary:
      reason: "{{ item.msg }}"
  with_items:
    - "{{ infrastructure_assert_result_searchhead_deployer_shcluster_c2.results }}"
  when:
    - item.failed is defined
    - item.failed

- name: Assert file version for group vars file
  delegate_to: "{{ loop_inventory_hostname }}"
  run_once: true
  ansible.builtin.assert:
    that:
      - "hostvars[loop_inventory_hostname][item.parameter_name] is version(item.version, '>=')"
    fail_msg:
      "Your {{ item.parameter_name }} is {{ hostvars[loop_inventory_hostname][item.parameter_name] }} where it should be {{ item.version }}.
      Please compare your file in environments/{{ environment_name }}/{{ item.file_name }} with the file in the
      template directory and do necessary updates"
  loop:
    - { 'file_name': 'group_vars/searchhead_members_shcluster_c1',
        'parameter_name': 'cca_infrastructure_searchhead_members_shcluster_c2_file_version',
        'version': '2023.1.1'
    }
  ignore_errors: true
  register: infrastructure_assert_result_searchhead_members_shcluster_c1
  when:
    - loop_inventory_hostname in ( groups.searchhead_members_shcluster_c1 | default([]) )
    - hostvars[loop_inventory_hostname][item.parameter_name] is defined

- name: Set fact if assert failed, to be used in final assert
  ansible.builtin.set_fact:
    infrastructure_assert_failed: true
    infrastructure_assert_result_searchhead_members_shcluster_c1_summary:
      reason: "{{ item.msg }}"
  with_items:
    - "{{ infrastructure_assert_result_searchhead_members_shcluster_c1.results }}"
  when:
    - item.failed is defined
    - item.failed

- name: Assert file version for group vars file
  delegate_to: "{{ loop_inventory_hostname }}"
  run_once: true
  ansible.builtin.assert:
    that:
      - "hostvars[loop_inventory_hostname][item.parameter_name] is version(item.version, '>=')"
    fail_msg:
      "Your {{ item.parameter_name }} is {{ hostvars[loop_inventory_hostname][item.parameter_name] }} where it should be {{ item.version }}.
      Please compare your file in environments/{{ environment_name }}/{{ item.file_name }} with the file in the
      template directory and do necessary updates"
  loop:
    - { 'file_name': 'group_vars/searchhead_members_shcluster_c2',
        'parameter_name': 'cca_infrastructure_searchhead_deployer_shcluster_c2_file_version',
        'version': '2023.1.1'
    }
  ignore_errors: true
  register: infrastructure_assert_result_searchhead_members_shcluster_c2
  when:
    - loop_inventory_hostname in ( groups.searchhead_members_shcluster_c2 | default([]) )
    - hostvars[loop_inventory_hostname][item.parameter_name] is defined

- name: Set fact if assert failed, to be used in final assert
  ansible.builtin.set_fact:
    infrastructure_assert_failed: true
    infrastructure_assert_result_searchhead_members_shcluster_c2_summary:
      reason: "{{ item.msg }}"
  with_items:
    - "{{ infrastructure_assert_result_searchhead_members_shcluster_c2.results }}"
  when:
    - item.failed is defined
    - item.failed

- name: Assert file version for group vars file
  delegate_to: "{{ loop_inventory_hostname }}"
  run_once: true
  ansible.builtin.assert:
    that:
      - "hostvars[loop_inventory_hostname][item.parameter_name] is version(item.version, '>=')"
    fail_msg:
      "Your {{ item.parameter_name }} is {{ hostvars[loop_inventory_hostname][item.parameter_name] }} where it should be {{ item.version }}.
      Please compare your file in environments/{{ environment_name }}/{{ item.file_name }} with the file in the
      template directory and do necessary updates"
  loop:
    - { 'file_name': 'group_vars/standalone_indexers',
        'parameter_name': 'cca_infrastructure_standalone_indexers_file_version',
        'version': '2023.1.1'
    }
  ignore_errors: true
  register: infrastructure_assert_result_standalone_indexers
  when:
    - loop_inventory_hostname in ( groups.standalone_indexers | default([]) )
    - hostvars[loop_inventory_hostname][item.parameter_name] is defined

- name: Set fact if assert failed, to be used in final assert
  ansible.builtin.set_fact:
    infrastructure_assert_failed: true
    infrastructure_assert_result_standalone_indexers_summary:
      reason: "{{ item.msg }}"
  with_items:
    - "{{ infrastructure_assert_result_standalone_indexers.results }}"
  when:
    - item.failed is defined
    - item.failed

- name: Assert file version for group vars file
  delegate_to: "{{ loop_inventory_hostname }}"
  run_once: true
  ansible.builtin.assert:
    that:
      - "hostvars[loop_inventory_hostname][item.parameter_name] is version(item.version, '>=')"
    fail_msg:
      "Your {{ item.parameter_name }} is {{ hostvars[loop_inventory_hostname][item.parameter_name] }} where it should be {{ item.version }}.
      Please compare your file in environments/{{ environment_name }}/{{ item.file_name }} with the file in the
      template directory and do necessary updates"
  loop:
    - { 'file_name': 'group_vars/standalone_searchheads', 'parameter_name': 'cca_infrastructure_standalone_searchheads_file_version', 'version': '2023.1.1' }
  ignore_errors: true
  register: infrastructure_assert_result_standalone_searchheads
  when:
    - loop_inventory_hostname in ( groups.standalone_searchheads | default([]) )
    - hostvars[loop_inventory_hostname][item.parameter_name] is defined

- name: Set fact if assert failed, to be used in final assert
  ansible.builtin.set_fact:
    infrastructure_assert_failed: true
    infrastructure_assert_result_standalone_searchheads_summary:
      reason: "{{ item.msg }}"
  with_items:
    - "{{ infrastructure_assert_result_standalone_searchheads.results }}"
  when:
    - item.failed is defined
    - item.failed
