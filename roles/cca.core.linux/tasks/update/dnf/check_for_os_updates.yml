---
# tasks file for cca.core.linux
#
# Description:
#
# Prerequisite:
#
# Author: Roger Lindquist (github.com/rlinq)
#
# Release: 2025.2.1

- name: Check release update for specific Amazon ansible_distributions
  ansible.builtin.shell:
    cmd: set -o pipefail && dnf check-release-update 2>&1 | grep "dnf upgrade --releasever" | tail -1 | cut -d"=" -f2
  args:
    executable: /bin/bash
  register: dnf_relesasever_status
  when:
    - ansible_distribution == "Amazon"
    - ansible_distribution_major_version == "2023"
    - ansible_architecture == "x86_64"
  check_mode: false
  changed_when: false

- name: Set fact for Amazon releasever
  ansible.builtin.set_fact:
    cca_dnf_releasever: >-
      {{
        dnf_relesasever_status.stdout | default('UpToDate')
        if (dnf_releasever | default('latest')) == 'latest'
        else (dnf_releasever | default(None))
      }}
  when:
    - ansible_distribution == "Amazon"
    - ansible_distribution_major_version == "2023"
    - ansible_architecture == "x86_64"

- name: "DRY RUN: Get dnf update status with releasever"
  ansible.builtin.dnf:
    name: "{{ cca_control.package.updates.include_packages }}"
    state: latest
    exclude: "{{ cca_control.package.updates.exclude_packages }}"
    releasever: "{{ cca_dnf_releasever }}"
  register: dnf_update_status_releasever
  when:
    - cca_dnf_releasever is defined
    - not use_shell_fallback | default(false)
  check_mode: true
  tags:
    - skip_ansible_lint

- name: "DRY RUN: Get dnf update status with releasever (using shell fallback)"
  ansible.builtin.shell: |
    dnf update --assumeno --releasever="{{ cca_dnf_releasever }}" \
    {{ cca_control.package.updates.include_packages | default('') }} \
    --exclude="{{ cca_control.package.updates.exclude_packages | default('') }}"
  register: dnf_update_status_releasever
  when:
    - cca_dnf_releasever is defined
    - use_shell_fallback | default(false)
  check_mode: true
  changed_when: false
  no_log: "{{ ansible_verbosity < 3 }}"

- name: "DRY RUN: Get dnf update status"
  ansible.builtin.dnf:
    name: "{{ cca_control.package.updates.include_packages }}"
    state: latest
    exclude: "{{ cca_control.package.updates.exclude_packages }}"
  register: dnf_update_status
  when:
    - cca_dnf_releasever is not defined
    - not use_shell_fallback | default(false)
  check_mode: true
  tags:
    - skip_ansible_lint

- name: "DRY RUN: Get dnf update status (using shell fallback)"
  ansible.builtin.shell: |
    dnf update --assumeno {{ cca_control.package.updates.include_packages | default('') }} \
    --exclude="{{ cca_control.package.updates.exclude_packages | default('') }}"
  register: dnf_update_status
  when:
    - cca_dnf_releasever is not defined
    - use_shell_fallback | default(false)
  check_mode: true
  changed_when: false
  no_log: "{{ ansible_verbosity < 3 }}"

- name: Set fact if kernel update is detected (dnf module)
  ansible.builtin.set_fact:
    kernel_update_needed: true
  with_items:
    - "{{ dnf_update_status_releasever.results | default('') | list }}"
    - "{{ dnf_update_status.results | default('') | list }}"
  check_mode: false
  when:
    - item | regex_search('kernel')
    - not use_shell_fallback | default(false)

- name: Set fact if kernel update is detected (shell fallback)
  ansible.builtin.set_fact:
    kernel_update_needed: true
  when:
    - (dnf_update_status_releasever.stdout is defined and (dnf_update_status_releasever.stdout | regex_search('kernel')))
    - (dnf_update_status.stdout is defined and (dnf_update_status.stdout | regex_search('kernel')))
    - use_shell_fallback | default(false)
  check_mode: false

- name: Get pending actions
  ansible.builtin.include_role:
    name: cca.core.linux
    tasks_from: check_pending_actions.yml

- name: End play for this host due to this reason (dnf module)
  ansible.builtin.debug:
    msg: "{{ dnf_update_status.msg | default('') }}{{ dnf_update_status_releasever.msg | default('') }}"
  when:
    - not use_shell_fallback | default(false)
    - (
        ( dnf_update_status.results is defined and dnf_update_status.msg == 'Nothing to do' )
        or
        ( dnf_update_status_releasever.results is defined and dnf_update_status_releasever.msg == 'Nothing to do' )
      )
      and
      not stat_server_reboot_pending.stat.exists | default(false)
      and
      not config_update | default(false)

- name: End play for this host due to this reason (shell fallback)
  ansible.builtin.debug:
    msg: "{{ dnf_update_status.stdout | default('') }}{{ dnf_update_status_releasever.stdout | default('') }}"
  when:
    - use_shell_fallback | default(false)
    - (
        ( dnf_update_status.stdout is defined and (dnf_update_status.stdout | regex_search('Nothing to do')) )
        or
        ( dnf_update_status_releasever.stdout is defined and (dnf_update_status_releasever.stdout | regex_search('Nothing to do')) )
      )
      and
      not stat_server_reboot_pending.stat.exists | default(false)
      and
      not config_update | default(false)

- name: End play for host if nothing needs to be done (dnf module)
  ansible.builtin.meta: end_host
  when:
    - not use_shell_fallback | default(false)
    - (
        ( dnf_update_status.results is defined and dnf_update_status.msg == 'Nothing to do' )
        or
        ( dnf_update_status_releasever.results is defined and dnf_update_status_releasever.msg == 'Nothing to do' )
      )
      and
      not stat_server_reboot_pending.stat.exists | default(false)
      and
      not config_update | default(false)
  check_mode: false

- name: End play for host if nothing needs to be done (shell fallback)
  ansible.builtin.meta: end_host
  when:
    - use_shell_fallback | default(false)
    - (
        ( dnf_update_status.stdout is defined and (dnf_update_status.stdout | regex_search('Nothing to do')) )
        or
        ( dnf_update_status_releasever.stdout is defined and (dnf_update_status_releasever.stdout | regex_search('Nothing to do')) )
      )
      and
      not stat_server_reboot_pending.stat.exists | default(false)
      and
      not config_update | default(false)
  check_mode: false
