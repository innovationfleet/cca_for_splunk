---
# tasks file for cca.core.linux
#
# Description:
#
# Prerequisite:
#
# Author: Roger Lindquist (github.com/rlinq)
#
# Release: 2024.3.1

- name: Include role to check if there is a pending reboot
  ansible.builtin.include_tasks: check_pending_actions.yml
  when:
    - not cca_skip_server_reboot | default(false)

- name: Gather facts about configured services
  ansible.builtin.service_facts:
  no_log: "{{ ansible_verbosity < 3 }}"

- name: Control services during server reboot and reboot server if required
  block:
    - name: Stop splunk service and disable it
      ansible.builtin.systemd:
        name: Splunkd.service
        state: stopped
        enabled: false
      when:
        - ansible_facts.services['Splunkd.service'] is defined
      no_log: "{{ ansible_verbosity < 3 }}"

    - name: Stop cgroup_daemon service and disable it
      ansible.builtin.systemd:
        name: cca_cgroup_version_daemon.service
        state: stopped
        enabled: false
      when:
        - ansible_facts.services['cca_cgroup_version_daemon.service'] is defined
      no_log: "{{ ansible_verbosity < 3 }}"

    - name: Reboot the server based on notification state and wait for it to come back
      ansible.builtin.reboot:
        reboot_timeout: 1200
        post_reboot_delay: 30
      register: server_reboot_status

    - name: Delete statefile based on reboot status
      ansible.builtin.file:
        path: "{{ server_reboot_pending | default('/tmp/server_reboot.pending') }}"
        state: 'absent'
      when:
        - server_reboot_status.rebooted
      check_mode: false

    - name: Delete statefile based on reboot status
      ansible.builtin.file:
        path: "{{ splunk_service_restart_pending | default('/tmp/splunk_service_restart.pending') }}"
        state: 'absent'
      when:
        - server_reboot_status.rebooted
      check_mode: false

    - name: Include tasks to handle cgroup versions, secondary reboot if needed
      include_tasks: systemd/manage_cgroup_version.yml
      when:
        not cgroups_configured | default(false)

    - name: Set fact that cgroups has been configured
      ansible.builtin.set_fact:
        cgroups_configured: true

    - name: Delete statefile based on reboot status
      ansible.builtin.file:
        path: "{{ server_reboot_pending | default('/tmp/server_reboot.pending') }}"
        state: 'absent'
      when:
        - server_reboot_status.rebooted
      check_mode: false

    - name: Delete statefile based on reboot status
      ansible.builtin.file:
        path: "{{ splunk_service_restart_pending | default('/tmp/splunk_service_restart.pending') }}"
        state: 'absent'
      when:
        - server_reboot_status.rebooted
      check_mode: false

  when:
    - stat_server_reboot_pending.stat.exists | default(false)
    - not cca_skip_server_reboot | default(false)

- name: Start cgroup_daemon service and enable it
  ansible.builtin.systemd:
    name: cca_cgroup_version_daemon.service
    state: started
    enabled: true
  when:
    - ansible_facts.services['cca_cgroup_version_daemon.service'] is defined
  no_log: "{{ ansible_verbosity < 3 }}"

- name: Restart Splunkd service if it was started and require restart
  ansible.builtin.systemd:
    name: "{{ systemd_enterprise_name }}"
    state: restarted
    enabled: true
  when:
    - stat_splunk_service_restart_pending.stat.exists | default(false)
    - stat_splunkd_service_started.stat.exists | default(false)
    - ansible_facts.services[systemd_enterprise_name] is defined

- name: Cleanup state files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ splunk_service_restart_pending | default('/tmp/splunk_service_restart.pending') }}"
    - "{{ splunk_service_status | default('/var/tmp/splunkd_service_started') }}"
  changed_when: false
  check_mode: false
