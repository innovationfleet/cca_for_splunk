#!/usr/bin/env bash


set -o errexit
set -o pipefail
set -o nounset

function Usage () {
    cat <<HELP_USAGE

    CCA for Splunk is a toolset used to automate infrastructure
    and onboarding tasks using Ansible.

    $0  [-d|--debug] [-c|--check] [-s|--setup] [-u|--upgrade] [-h|--help]

   -d,--debug  Enable script debug
   -c,--check  Configures Ansible to run in check mode
   -s,--setup  Guided setup wizard to initially setup or upgrade CCA for Splunk
   -u,--upgrade Upgrade CCA Manager
   -h,--help   Print usage
HELP_USAGE
exit 0
}

! getopt --test > /dev/null
if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
    echo 'IÂ´m sorry, `getopt --test` failed in this environment.'
    exit 1
fi

# Trap exit 1 and let it continue in script
trap "exit 1" TERM
export ProcessPid=$$

# Get current dir, path and script name
ScriptPath=$(readlink -f "$(dirname "${BASH_SOURCE[0]}")")
DirName=$(basename "$ScriptPath")
ScriptName=${0##*/}

# CCA for Splunk globals
CcaScriptName="cca_ctrl"
CcaRepo="cca_for_splunk"
CcaRepoPath=~/clones/cca_for_splunk
CcaInfraRepoPath=~/data/main/cca_splunk_infrastructure
CcaOnbRepoPath=~/data/main/cca_splunk_onboarding

CcaRepoShort="cca"
ScriptParams=$@
Setup=false
Upgrade=false
EnforceMultiplexer=true


sed_cmd="sed"
CcaRunId=\"cca_runid\":\"${ProcessPid}\"

test -f .storage/settings && source <(grep = .storage/settings)

# Define other globals
if [[ $(tput cols) -gt  130 ]] ; then

  WhiptailWidth=130

else

  if [[ $(tput cols) -lt 120 ]] ; then

    echo "You have a terminal width of $(tput cols), it's less than 120 and thus the CCA for Splunk UI will not render correctly"
    echo "Please use a larger terminal screen."
    exit 0

  else

     WhiptailWidth=$(($(tput cols)))

  fi

fi

WhiptailHight=30
BackTitle="   $(hostname -s) - CCA for Splunk $(date +'%Y') v2025.2.1"
CookieFile="${ScriptPath}/.cookie"
LicenseFile=~/clones/cca_for_splunk/LICENSE
InfoFile=~/clones/cca_for_splunk/RELEASE_NOTES.txt

Debug=false


Options=:dchsu
LongOpts=debug,check,help,setup,upgrade,user

! PARSED=$(getopt --options=$Options --longoptions=$LongOpts --name "$0" -- "$@")
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    Usage
    exit 2
fi
# read getopt's output this way to handle the quoting right:
eval set -- "$PARSED"

debug=false CheckMode=false outFile=-
while true; do
    case "$1" in
        -d|--debug)
            Debug=true
            shift
            ;;
        -c|--check)
            CheckMode=true
            shift
            ;;
        -h|--help)
            Usage
            shift
            ;;
        -s|--setup)
            Setup=true
            SelectedPlaybook=setup_wizard.yml
            shift
            ;;
        -u|--upgrade)
            Upgrade=true
            SelectedPlaybook=upgrade_cca_manager.yml
            shift
            ;;
        -s|--user)
            User=$1
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            Usage
            ;;
    esac
done


${Debug} && echo $ScriptPath
${Debug} && echo $ScriptName

###############################################################################
#
# If checkmode is active, switch thin border line to green to visually indicte
# that we are in ansible checkmode.
# Set required paramters for checmode
#
###############################################################################

if ${CheckMode} ; then

CheckModeArgument="-CD"
CheckModeText=" - CHECK MODE"

# Set whiptail black theme
export NEWT_COLORS='
root=black,black
window=white,black
border=green,black
textbox=white,black
button=black,brightgreen
roottext=white,black
label=white,black
title=white,black
actlistbox=green,black
listbox=white,black
actsellistbox=brightgreen,black
entry=white,black
listbox=white,black
checkbox=white,black
actcheckbox=black,brightgreen
'

else

CheckModeArgument=""
CheckModeText=""

export NEWT_COLORS='
root=black,black
window=white,black
border=lightgrey,black
textbox=white,black
button=black,brightgreen
roottext=white,black
label=white,black
title=white,black
actlistbox=green,black
listbox=white,black
actsellistbox=brightgreen,black
entry=white,black
listbox=white,black
checkbox=white,black
actcheckbox=black,brightgreen
'

fi

###############################################################################
# Help setting up environment and prevent script execution from repo root
# Globals:
#   DirName
# Arguments:
#
# Returns:
#
###############################################################################
# Function to check and assist in setting up splunk environments
function environment_helper() {

  if [[ ${DirName} =~ ${CcaRepo} ]] ; then

cat <<EOF

##############################################################
#                                                            #
#                     Welcome                                #
#                                                            #
#      Continuous Configuration Automation for Splunk        #
#                                                            #
#                  Inital info!                              #
#                                                            #
##############################################################


* Before we start there is some important information that is
  needed to outline.

* Execution from within the root directory of the main repo

     ${CcaRepo}

  is not supported as it will alter the project files and
  break future updates.

* Therefore we will guide you to create a setup with all
  custom settings outside the main repo root.
  A set of wizards will help with recommendations and setup
  of an environment that will work the best for both Splunk
  infrastructure automation as well as Splunk onboarding
  automation.

* This script will exit now.
  If you would like to configure your environment run
  the script again with

  ./cca_ctrl --setup

* If you would like to upgrade CCA Manager run the script
  again with

  ./cca_ctrl --upgrade

EOF

exit 0

fi

}


###############################################################################
# Format and write out a confirmation box. Option to override default value of
# yes/no.
# Globals:
#   BackTitle, WhiptailHight, WhiptailWidth, CheckModeText
# Arguments:
#   Title, Text, YesButton, NoButton
# Returns:
#   Text of Yes/No Button
###############################################################################
# Function to create a textbox with whiptail
whiptail_confirmationbox () {

  # Assign variables
  local Title=${1}
  shift
  local Text=$1
  shift
  local YesButton=$1
  shift
  local NoButton=$1
  local ScrollText=""

  if [[ $(printf "$Text" | wc -l) -gt 20 ]] ; then

     local ScrollText="--scrolltext"

  fi

  whiptail --title "${Title}${CheckModeText}"\
           --backtitle "${BackTitle}"\
           --defaultno\
           --yes-button "${YesButton}"\
           --no-button "${NoButton}"\
           --yesno "${Text}"\
           ${ScrollText}\
           ${WhiptailHight}\
           ${WhiptailWidth}\
           3>&1 1>&2 2>&3

  # Return value from selection, instaead of 0|1
  ReturnValue=$?
  if [[ $ReturnValue = 0 ]]; then

    echo "${YesButton}"
    exit

  else

    echo "${NoButton}"
    exit

  fi

}


###############################################################################
# Textbox reads from file and displays text in a textbox.
# Globals:
#   BackTitle, WhiptailHight, WhiptailWidth
# Arguments:
#   Title (The title of the text box)
#   File (The name of the file, content is inserted into the box)
#   ButtonText (The text to show in screen button)
###############################################################################
function whiptail_text_box() {

  # Assign variables
  local Title=$1
  shift
  local File=$1
  shift
  local ButtonText=$1

  if [[ a"${ButtonText}" == a ]] ; then

    ButtonText="Ok"

  fi

  if [[ $(wc -l ${File} | awk '{ print $1 }') -ge 20 ]] ; then

    local ScrollText="--scrolltext"

  fi

    whiptail --title "${Title}${CheckModeText}"\
           --backtitle "${BackTitle}"\
           --ok-button=${ButtonText}\
           --textbox ${File}\
           ${ScrollText}\
           ${WhiptailHight}\
           ${WhiptailWidth}\
           3>&1 1>&2 2>&3

}


###############################################################################
# Generate radiolist options from an array of 3 values per line
# Globals:
#   BackTitle, WhiptailHight, WhiptailWidth, ProcessPid
# Arguments:
#   Title
#   Items array (Item, Description, On/Off) per line
# Returns:
#   Selected item
###############################################################################
function whiptail_radiolist () {

  local Title=$1
  shift
  local Description=$1
  shift
  local Items=("$@")
  local ScrollText=""

  # Limit radio list to 21 lines, then it should scroll
  local RadioListLen=$(( ${#Items[@]} / 3))
  if [[ $RadioListLen -gt 21 ]] ; then

    RadioListLen=21
    local ScrollText="--scrolltext"

  fi

  local SelectedItem=$(whiptail --backtitle "${BackTitle}"\
                                --title "${Title}${CheckModeText}"\
                                --radiolist "${Description}"\
                                --nocancel\
                                --ok-button "Next"\
                                ${ScrollText}\
                                ${WhiptailHight}\
                                ${WhiptailWidth}\
                                ${RadioListLen}\
                                "${Items[@]}"\
                                3>&1 1>&2 2>&3 )

  if [[ a"${SelectedItem}" == a ]] ; then

    Description="\n\n Nothing selected, what would you like to do?"
    Answer=$(whiptail_confirmationbox "${Title}" "${Description}" "Back" "Cancel")
    if [[ ${Answer} == "Cancel" ]] ; then

      cancel

    else

      whiptail_radiolist "${Title}" "${Description}" "${Items[@]}"

    fi

  else

       echo ${SelectedItem}
       exit 0

  fi

}

###############################################################################
# Generate checklist options from an array of 3 values per line
# Globals:
#   BackTitle, WhiptailHight, WhiptailWidth, ProcessPid
# Arguments:
#   Title
#   Items array (Item, Description, On/Off) per line
# Returns:
#   Selected item
###############################################################################
function whiptail_checklist () {

  local Title=$1
  shift
  local Description=$1
  shift
  local Items=("$@")

  # Limit check list to 21 lines before adding scrollbar
  local CheckListLen=$(( ${#Items[@]} / 3))
  if [[ $CheckListLen -gt 21 ]] ; then

    CheckListLen=21

  fi

  local SelectedItem=$(whiptail --backtitle "${BackTitle}"\
                                --title "${Title}${CheckModeText}"\
                                --checklist "${Description}"\
                                ${WhiptailHight}\
                                ${WhiptailWidth}\
                                ${CheckListLen}\
                                "${Items[@]}"\
                                3>&1 1>&2 2>&3 )

  if [[ a"${SelectedItem}" == a ]] ; then

    Description="\n\n Nothing selected, what would you like to do?"
    Answer=$(whiptail_confirmationbox "${Title}" "${Description}" "Back" "Cancel")
    if [[ ${Answer} == Cancel ]] ; then

      cancel

    else

      whiptail_checklist "${Title}" "${Description}" "${Items[@]}"

    fi

  else

       echo ${SelectedItem}
       exit 0

  fi

}


###############################################################################
# Display a inputbox for collecting info or arguments
# Globals:
#   BackTitle
#   WhiptailHight
#   WhiptailWidth
# Arguments:
#   Title
#   Description
#   Init
#   ButtonText
# Outputs:
#   InputResult
#
###############################################################################
function whiptail_inputbox () {

  local Title=$1
  shift
  local Description=$1
  shift
  local Init=$1
  shift
  local ButtonText=$1

  local InputResults=$(whiptail --backtitle "${BackTitle}"\
                                --title "${Title}${CheckModeText}"\
                                --nocancel\
                                --ok-button "${ButtonText}"\
                                --inputbox "${Description}"\
                                ${WhiptailHight}\
                                ${WhiptailWidth}\
                                ${Init}\
                                3>&1 1>&2 2>&3 )

  echo ${InputResults}

}




###############################################################################
# Terminte the main process PID
###############################################################################
function cancel() {

  echo "Exit script"
  kill -s TERM  ${ProcessPid}
  exit 1

}

###############################################################################
# Calculates md5 of a file
# Arguments:
#   Filename
# Returns:
#   MD5 hash of supplied file
###############################################################################
function file_md5() {

  # Assign variales
  local FileName=$1

  md5=$(md5sum ${FileName} | awk '{ print $1}')
  if [[ $? -ne 0 ]] ; then

     echo "NotFound"

  fi

  echo "${md5}"

}

###############################################################################
# Gets stored md5 hash of a file by parsing the cockie file
# Arguments:
#   Filename, HashKey
# Returns:
#   MD5 hash of matching hash, or 1 if not found
###############################################################################
function get_cookie() {

  # Parse variables
  local FileName=$1
  local HashKey=$2

  if [[ -f $FileName ]] ; then

    source $FileName
    echo ${HashKey}

  else

    echo 1

  fi

}


###############################################################################
# Checks if an hash exists in the cookie file
# Arguments:
#   Filename, HashKey, Value
# Returns:
#   0 if found, 1 if not
###############################################################################
function has_cookie() {

  # Parse variables
  local FileName=$1
  local HashKey=$2
  local Value=$3
  local Hash="${HashKey}=${Value}"

  if [[ -f $FileName ]] ; then

    grep -q "${Hash}" ${FileName}
    echo $?

  else

    echo 1

  fi

}


###############################################################################
# Add or update stored value in cookie file, return info if value was ok
# Arguments:
#   CookieFile, HashedKey, Value
# Returns:
#   0 if present, 1 if updated
###############################################################################
function update_cookie() {

  # Assign variables
  local FileName=$1
  local HashKey=$2
  local Value=$3
  local Hash="${HashKey}=${Value}"

  [[ ! -f ${FileName} ]] && touch ${FileName}

  if grep -q ${Hash} ${FileName} ; then

    echo $?

  else

    if grep -q ${HashKey} ${FileName} ; then

      ${sed_cmd} -i "s/${HashKey}=.*/${Hash}/" ${FileName}

    else

      echo "${Hash}" >> ${FileName}

    fi

  fi

}


###############################################################################
# Handle display of license confirmation dialog. Exists script if license
# is not accepted
# Globals
#   LicenseFile, CookieFile
###############################################################################
function accept_eula() {

  local LicenseText="$(${sed_cmd} '$!s/$/\\n/' ${LicenseFile} | tr -d '\n')"

  if [[ $(has_cookie ${CookieFile} "license_md5"\
        $(file_md5 ${LicenseFile})) -ne 0  ]] ; then

    LicenseAnswer=$(whiptail_confirmationbox "Accept  License"\
                  "${LicenseText}" "Accept" "Reject")

    if [[ a"${LicenseAnswer}" == aAccept ]] ; then

     update_cookie ${CookieFile} "license_md5" "$(file_md5 ${LicenseFile})"

    else

     echo "License was not accepted, exiting script"
     exit 1

    fi

  fi

}


###############################################################################
# Handle display of info dialog
# Globals:
#   CookieFile
#   InfoFile
###############################################################################
function info_dialog() {

  local InfoText="$(${sed_cmd} '$!s/$/\\n/' ${InfoFile} | tr -d '\n')"
  if [[ $(has_cookie "${CookieFile}" "info_md5" \
        $(file_md5 ${InfoFile})) -ne 0  ]] ; then

    local InfoAnswer=$(whiptail_confirmationbox "CCA for Splunk Release Notes"\
                  "${InfoText}" "Keep" "Got it")

    if [[ a"${InfoAnswer}" == a"Got it" ]] ; then

     update_cookie ${CookieFile} "info_md5" "$(file_md5 ${InfoFile})"

    fi

  fi

}


###############################################################################
# Handle display of info dialog
# Globals:
#   Playbooks
# Locals:
#   PathDepth
#   TempPathLength
# Returns:
#   Highest number of directories in playbook paths
###############################################################################
function get_path_depth() {

  local PathDeepth=0

  for Play in $Playbooks ; do

      local TempPathLength=$(echo $Play | awk -F/ '{print NF-1}')

      if [ $TempPathLength -gt $PathDeepth ] ; then

         echo $TempPathLength
         break

      fi

  done

}


###############################################################################
# Finds greatest common denominator in a set of file paths. Used to shorten path in
# UI diaglog.
# Globals:
#   Playbooks
# Locals:
#   PathDepth
#   CommonPath
#   TempPath
# Returns:
#   The least common den
###############################################################################
function greatest_common_path () {

  local PathDepth=$(get_path_depth)
  local CommonPath=''
  local TempPath=''
  local EndLoop=false

  for Play in $Playbooks ; do

    for ((i=2;i<=$(( PathDepth -1 ));i++)) ; do

    TempPath=$(echo $Play | cut -d"/" -f-${i})

      for Play in $Playbooks ; do

        if [[ ${Play} =~ "${TempPath}".* ]] ; then

            CommonPath=${TempPath}

        else

          echo $CommonPath
          EndLoop=true
          break 3

        fi
      done
    done
  done

  if [[ "${EndLoop}" == false ]] ; then
    echo $CommonPath
 fi
}


###############################################################################
# Get a list of all playbooks that valid for Splunk CCA
# Globals:
#   SelectedPlaybook (Stores the selected playbook)
# Variables:
#   Reads repo_type from .cookie file and use it as a playbook filter
###############################################################################
function select_playbook() {

  # Search through all playbooks and find those that have a matching REPO_TYPE
  # The playbook also need to have a short MENU_DESC that is used in the
  # menu and radio list selections

  local PlaybookArray

  cd ${ScriptPath}

    Playbooks=$(find ${ScriptPath}/playbooks ${CcaRepoPath}/playbooks -maxdepth 1\
	            -name "*.yml"\
                    | grep -e ".*.yml"\
                    | xargs grep "REPO_TYPE=${repo_type}"\
                    | awk -F: '{ print $1 }' | sort -u | sort -n )

    CommonPath="$(greatest_common_path)"
    CommonPath=$(${sed_cmd} "s|/${CcaRepo}||g" <<< ${CommonPath})
    ReplacePath="$CommonPath/"

  if [[ $(wc -w <<< ${Playbooks}) -eq 1 ]] ; then RadioListItemStatus="ON" ; else RadioListItemStatus="OFF" ; fi

  for Playbook in ${Playbooks} ; do

    local MenuDesc=("$(grep MENU_DESC ${Playbook} | awk -F= '{ print $2 }')")

    # Add MenuDesc to Items array
    if [[ a"${MenuDesc}" != a ]] ; then
       PlaybookArray+=("$(echo ${Playbook}\
                     | ${sed_cmd} "s|${CcaRepoPath}/|${CcaRepoShort}/|g"\
                     | ${sed_cmd} "s|${CcaInfraRepoPath}/|infra/|g"\
                     | ${sed_cmd} "s|${CcaOnbRepoPath}/|onb/|g"\
                     | ${sed_cmd} "s|playbooks/|.../|g"\
                     | ${sed_cmd} "s|//|/|g")")
       PlaybookArray+=("${MenuDesc}")
       PlaybookArray+=("${RadioListItemStatus}")
       MenuDesc=""

    else

      echo "Playbook could not be added to radiolist as it was missing\
           MENU_DESC"

    fi

  done

  cd - > /dev/null

  SelectedPlaybook=$(whiptail_radiolist "Select playbook"\
         "  Only playbooks with REPO_TYPE(${repo_type}) and a MENU_DESC\
 will be listed here. List supports scrolling, arrow <down>"\
         "${PlaybookArray[@]}")

}

###############################################################################
# Get a list of all environments that is applicable for CCA for Splunk
# Globals:
#   SelectedEnvironment (Stores the selected environment)
###############################################################################
function select_environment() {

  # Search through all environments

  local EnvironmentArray

  cd ${ScriptPath}
  Environments=$( find environments -maxdepth 1 | grep "/" | xargs echo -n )

  if [[ $(wc -w <<< ${Environments}) -eq 1 ]] ; then RadioListItemStatus="ON" ; else RadioListItemStatus="OFF" ; fi

  for Environment in ${Environments} ; do

  cd - > /dev/null

    # Add Environments to Items array
    EnvironmentArray+=("${Environment}")
    EnvironmentArray+=("$(echo ${Environment} | awk -F/ '{ print $2 }') Environment")
    EnvironmentArray+=("$RadioListItemStatus")

  done

  WindowTextSelectedPlaybook=$(echo ${SelectedPlaybook}\
                     | ${sed_cmd} "s|\.\.\./|playbooks/|g"\
                     | ${sed_cmd} "s|${CcaRepoShort}/|${CcaRepoPath}/|g"\
                     | ${sed_cmd} "s|infra/|${CcaInfraRepoPath}/|g"\
                     | ${sed_cmd} "s|onb/|${CcaOnbRepoPath}/|g")

 SelectedEnvironment=$(whiptail_radiolist "Select environment for ${WindowTextSelectedPlaybook}"\
         "Environments" "${EnvironmentArray[@]}")

}

###############################################################################
# Select hosts based on playbook and environment
# Globals:
#   SelectedPlaybook (Read)
#   SelectedEnvironment (Read)
#   SelectedHosts (Create)
###############################################################################
function select_hosts() {

  playbook_hosts

  for Host in ${PlaybookHosts[@]} ; do

    HostArray+=("${Host}")
    HostArray+=("${SelectedEnvironment}")
    HostArray+=("ON")

  done

  WindowTextSelectedPlaybook=$(echo ${SelectedPlaybook}\
                     | ${sed_cmd} "s|\.\.\./|playbooks/|g"\
                     | ${sed_cmd} "s|${CcaRepoShort}/|${CcaRepoPath}/|g"\
                     | ${sed_cmd} "s|infra/|${CcaInfraRepoPath}/|g"\
                     | ${sed_cmd} "s|onb/|${CcaOnbRepoPath}/|g")

  SelectedHosts=$(whiptail_checklist "Host Selection for ${WindowTextSelectedPlaybook}"\
     "Hosts that will be part of playbook execution " "${HostArray[@]}")
  ${Debug} && echo "Playbook --limits are:" ${SelectedHosts}

}


###############################################################################
# Parse output from playbook --list-hosts to build a valid host list
# Globals:
#   SelectedPlaybook (Read)
#   SelectedEnvironment (Read)
#   PlaybookHosts (Create Array)
###############################################################################
function playbook_hosts() {

  local InSection=false
  local Host
  local HostArray

 SelectedPlaybook=$(echo ${SelectedPlaybook}\
                    | ${sed_cmd} "s|\.\.\./|playbooks/|g"\
                    | ${sed_cmd} "s|${CcaRepoShort}/|${CcaRepoPath}/|g"\
                    | ${sed_cmd} "s|infra/|${CcaInfraRepoPath}/|g"\
                    | ${sed_cmd} "s|onb/|${CcaOnbRepoPath}/|g")

  # Assign the HostArray, restrictive set -u needs it to be defined
  HostArray=${HostArray[@]+"${HostArray[@]}"}

  IFS=$'\n'
  for Line in $(ansible-playbook --check -i ${ScriptPath}/${SelectedEnvironment}\
                  --list-hosts ${SelectedPlaybook}) ; do

    if [[ "${Line}" =~ hosts.\( ]] ; then

      InSection=true
      continue

    elif [[ "${Line}" =~ play ]] ; then

      InSection=false

    fi

    if ${InSection} ; then

      Host=$(echo ${Line} | awk '{ print $1 }')
      ${Debug} &&  echo "DEBUG: Host found in list-hosts output: ${Host}"

      if [[ ! "${HostArray[*]}" =~ "${Host}" ]] ; then

        HostArray+=("${Host}")

      fi

    fi

  done

  # Sort resulting array
  PlaybookHosts=($(sort <<<"${HostArray[*]}"))
  unset IFS

  ${Debug} && echo "DEBUG: All playbook hosts: ${PlaybookHosts[@]}"

}

###############################################################################
# Get extra vars to playbook from input dialog
# Add CCA Run ID to ansible extra-vars to be used by CCA
# Globals:
#   ExtraVars (Create)
###############################################################################
function get_extra_vars() {

  # Extract EXTRA_VARS block from playbook header using line continuation \
  local PlaybookVars=$(awk '
    BEGIN { ORS=" " }
    /^# EXTRA_VARS=/ {
      collecting=1
      sub(/^# EXTRA_VARS=/, "", $0)
      gsub(/\\$/, "", $0)
      print $0
      next
    }
    collecting && /^#/ {
      sub(/^#/, "", $0)
      if ($0 ~ /\\$/) {
        gsub(/\\$/, "", $0)
        print $0
      } else if (NF == 0) {
        next
      } else {
        print $0
        collecting=0
      }
      next
    }
    collecting && NF==0 {
      collecting=0
    }
  ' "${SelectedPlaybook}" | xargs)

  # Normalize playbook path for display
  local WindowTextSelectedPlaybook=$(echo "${SelectedPlaybook}" \
    | ${sed_cmd} "s|\.\.\./|playbooks/|g" \
    | ${sed_cmd} "s|${CcaRepoShort}/|${CcaRepoPath}/|g" \
    | ${sed_cmd} "s|infra/|${CcaInfraRepoPath}/|g" \
    | ${sed_cmd} "s|onb/|${CcaOnbRepoPath}/|g")

  local Title="Extra vars for ${WindowTextSelectedPlaybook}"
  local Description="  Here you can add extra variables for the playbook\n\n\
  The supported extra-vars are read from the playbook as # EXTRA_VARS=\n\n\
  Available default variables in this playbook are:\n\
\n$(for Var in ${PlaybookVars}; do echo "    ${Var}" ; done)\n\n\
  Change default values to alter the behaviour.
  Correct syntax for the text box is:\n\
  {\"text_var\": \"value\", \"boolean_var\":true}"
  local Init="{\"\":\"\"}"

  # Launch whiptail input box
  ExtraVars=$(whiptail_inputbox "${Title}" "${Description}" "${Init}" "Run")

  if [[ "${ExtraVars}" == "${Init}" ]]; then
    ExtraVars="{${CcaRunId}}"
  else
    ExtraVars=$(echo "${ExtraVars}" | sed "s/}/,${CcaRunId}}/g")
  fi

  ${Debug} && echo "Extra Vars --extra-vars are:" "${ExtraVars}"
}



###############################################################################
# Build final playbook command
# Globals:
#   SelectedPlaybook (Read)
#   SelectedEnvironment (Read)
#   SelectedHosts (Read)
#   CheckMode
###############################################################################
function run_playbook () {

  local User="--user=$(whoami)"
  local VaultPasswordFile=""
  local Become=""
  local BecomeUser=""
  local BecomeMethod=""
  local ExtraVars="--extra-vars='${ExtraVars}'"
  local Verbosity="-v"
  local CheckMode=""
  local AnsiblePlaybookArray

  AnsiblePlaybookArray+=("${SelectedPlaybook}")
  if [[ "${repo_type}" != "main" ]] ; then
      AnsiblePlaybookArray+=("-i ${ScriptPath}/${SelectedEnvironment}")
  fi
  AnsiblePlaybookArray+=("${User}")
  AnsiblePlaybookArray+=("${VaultPasswordFile}")
  AnsiblePlaybookArray+=("${Become}")
  AnsiblePlaybookArray+=("${BecomeUser}")
  AnsiblePlaybookArray+=("${BecomeMethod}")
  AnsiblePlaybookArray+=("${ExtraVars}")
  if [[ "${repo_type}" != "main" ]] ; then
      AnsiblePlaybookArray+=("${Verbosity}")
  fi
  AnsiblePlaybookArray+=("${CheckModeArgument}")

  # Convert SelectedHosts to a comma separated list of hosts to use in limit option
  SelectedHostArray=$(echo ${SelectedHosts} | ${sed_cmd} 's/"/ /g' | ${sed_cmd} 's/  / /g' )
  printf -v HostLimits ',%s' ${SelectedHostArray[@]}
  HostLimits=${HostLimits:1}

  echo ansible-playbook ${AnsiblePlaybookArray[@]} --limit ${HostLimits}
  # TODO: extra-vars didn't parse correctly without eval
  if [[ "${repo_type}" == main ]] ; then

    unset ANSIBLE_LOG_PATH ; eval ansible-playbook ${AnsiblePlaybookArray[@]} --limit ${HostLimits}

  else

    eval ansible-playbook ${AnsiblePlaybookArray[@]} --limit ${HostLimits}

  fi
}


###############################################################################
# Prompt for yes or no response, colors invalid response in red
# Returns:
#   0 (If positive answer)
#   terminate script if negative answer
###############################################################################
function confirmation_dialog() {

  while true; do

    read -r -n 1 -p "${1:-Continue?} [y/n]: " Answer
    case ${Answer} in
      [Yy]) echo ; return 0 ;;
      [Nn]) echo ; return 1 ;;
      *) printf " \033[31m %s \n\033[0m" "Invalid Option"
    esac

  done

}


###############################################################################
# Check that current script is current
# Globals:
#   ScriptPath
#   ScriptName
#   CcaScriptName
#   CcaRepo
#   ScriptParams
###############################################################################
function validate_script_version () {

set +e

 test -f .storage/settings && source <(grep = .storage/settings)


   if [[ ! -f ${CcaRepoPath}/${CcaScriptName} ]] ; then
     echo
     echo "The main CCA repository or cca_ctrl file couldn't be found."
     echo "The CCA Repo needs to exist in path: (${CcaRepoPath})"
     echo "Infrastructure Repo needs to exist in path: (${CcaInfraRepoPath})"
     echo "Onboarding Repo needs to exist in path: (${CcaOnbRepoPath})"
     echo "Please copy the cca_ctrl from the CCA repo to this directory"
     echo "and rerun the script again to see if this solves the issue."
     echo "Thank you!"
     echo

     trap_cancel "Exit"

   fi


   if ! [[ ${ScriptPath} =~ (${CcaInfraRepoPath}|${CcaOnbRepoPath}|${CcaRepoPath}) ]] ; then
     echo "The Open Source version of CCA for Splunk has fixed paths"
     echo "for the cca_for_splunk, cca_splunk_infrastructure and"
     echo "cca_splunk_onboarding repo."
     echo "Please updated your repos to match the following directories."
     echo "Infrastructure repo path: (${CcaInfraRepoPath})"
     echo "Onboarding repo path: (${CcaOnbRepoPath})"
     echo "CCA Repo path: (${CcaRepoPath})"
     echo "Thank you!"
     echo

     trap_cancel "Exit"

   fi

   if [[ $(file_md5 "${ScriptPath}/${ScriptName}") == \
       $(file_md5 ${CcaRepoPath}/${CcaScriptName}) || \
         ${repo_type} == main ]] ;\

   then

      ${Debug} &&  echo "Version OK"

   else

     echo "You have an outdated version of the script"
     echo "Do you want to update it?"
     if $(confirmation_dialog) ; then

       cp ${CcaRepoPath}/${ScriptName} "${ScriptPath}/"
       eval "bash ${ScriptPath}/${ScriptName} ${ScriptParams}"
       exit 0

     else

       echo "\n You answered no, the Script will exit"
       exit 1

     fi

   fi

}

###############################################################################
# Validate OS and required tools
# Arguments:
# Returns:
###############################################################################
function validate_os () {

   if [ "$(uname -s)" == "Darwin" ]; then

      sed_cmd="gsed"
      if which ${sed_cmd} > /dev/null ; then

         :

      else

        echo "Your OS is $(uname -s), normal sed command is not sufficient. 'gsed' is needed on Mac, you can install it with homebrew."
        echo "The script will terminate"
        exit 1

     fi

   fi

}

###############################################################################
# Trap Cancel from Whiptail dialog and kill process
# Arguments:
#   DialogOutput
# Returns:
#   0 (If other than cancel is recieved
###############################################################################
function trap_cancel () {

  if [[ $1 == Cancel ]] ; then

    echo "Cancel option recieved, exiting script"
    kill -s TERM ${ProcessPid}

  elif [[ $1 == Exit ]] ; then

    echo "Exit recieved, exiting script"
    kill -s TERM ${ProcessPid}

  else

    return 0

  fi

}

###############################################################################
# Validate and check if sÂ´terminal multiplexer should be used for running
# cca_ctrl. .storage/settings has option to control multiplexer option,
# default is enabled. MultiplexerControl=true|false
# Arguments:
#   None
# Returns:
#   0 If validation is ok
#   13 if validation check is not ok
###############################################################################
function multiplexer_control () {

  if [[ ${TERM} == screen ]] ; then

    return 0

  else

    test -f .storage/settings && source <(grep = .storage/settings)
    if ! ${EnforceMultiplexer}  ; then

      :

    else

      echo
      echo "Run cca_ctrl in a screen or tmux session"
      echo "If you would like to supress this message and run without using"
      echo "terminal Multiplexer, set EnforceMultiplexer to False in .storage/settings"
      exit 13

    fi

  fi

}



###############################################################################
# Main part of script

# Check that the lastest version of the script is used if executed outside the repo
validate_script_version

# Validate that we have a supported OS and we have the required tools.
validate_os

# If we are running cca_ctrl from main repo, trigger setup or upgrade of CCA
# when passing --setup or --upgrade as arguments, the environment_helper
# is not triggered
if ! $Setup && ! $Upgrade; then
  environment_helper
fi

# Check option if we should enforce tmux or screen sessions
test -f .storage/settings && source <(grep = .storage/settings)
multiplexer_control

# Dialog to show the release notes and info text
info_dialog

# Dialog to accept license terms
accept_eula

# TODO Validate data in Splunk CCA and report errors before continuing


# List of applicable playbooks, store selected playbook in Selected Playbook
# variable.
select_playbook

${Debug} && echo "${SelectedPlaybook}"

# Select environment variables to use
if [[ "${repo_type}" != main ]] ; then
  select_environment
  ${Debug} && echo "${SelectedEnvironment}"

else

  SelectedEnvironment="setup_wizard"

  if [[ -v ANSIBLE_VAULT_PASSWORD_FILE ]]; then
    echo -n "   ANSIBLE_VAULT_PASSWORD_FILE environment value is set to "
    echo -n "${ANSIBLE_VAULT_PASSWORD_FILE}. "

    vault_file=(${ANSIBLE_VAULT_PASSWORD_FILE})
    vault_file=$(echo ${vault_file[0]})
    vault_file="${vault_file/#\~/$HOME}"

    if [[ ! -e "${vault_file[0]}" ]]; then

      echo -n "But the file don't exists yet."
      echo " Create the ${ANSIBLE_VAULT_PASSWORD_FILE} file and add this content to it. Generated with 'openssl rand -hex 32'"
      echo " echo \"$(openssl rand -hex 32)\" > ${ANSIBLE_VAULT_PASSWORD_FILE}"
      echo "   Script will exit now."
      exit 1
    fi

  fi
fi

# List playbook hosts and give option to exclude hosts from execution
select_hosts
${Debug} && echo "${SelectedHosts}"




# Option to add extra variables to playbook execution
get_extra_vars

# Run playbook in normal or check mode

# Summary of what will be executed
run_playbook

