# Playbook to handle Cluster Manager and Cluster peers
#
# REPO_TYPE=infrastructure
# MENU_DESC=Manage Cluster Manager and Cluster Peers
# EXTRA_VARS=hide_password(true) preflight_command_retries(90) skip_preflight_check(false) skip_bundle_push(false) force_splunkd_restart(false)

- name: Initialize playbook run on manager server - Index Clusters
  hosts: manager
  connection: local
  strategy: linear
  any_errors_fatal: true
  pre_tasks:
    - name: Include initialize task
      ansible.builtin.include_role:
        name: cca.core.control
        tasks_from:
          initialize.yml
      vars:
        target: "cluster_managers-cluster_peers"


- name: Verify that connection to all servers are ok before we start
  hosts: cluster_managers:cluster_peers
  become: true
  become_method: ansible.builtin.sudo
  become_user: "{{ splunk_user }}"
  gather_facts: false
  strategy: linear
  any_errors_fatal: true
  pre_tasks:
    - name: Include tasks to wait for connection to host
      ansible.builtin.include_role:
        name: cca.core.splunk
        tasks_from:
          wait_for_connection.yml

    - name: Include pre tasks
      ansible.builtin.include_role:
        name: cca.core.control
        tasks_from:
          pre_tasks.yml


- name: Configure the Cluster Manager instances
  hosts: cluster_managers
  become: true
  become_method: ansible.builtin.sudo
  become_user: "{{ splunk_user }}"
  gather_facts: false
  any_errors_fatal: true
  pre_tasks:
    - name: Gather only network facts
      ansible.builtin.setup:
        gather_subset: 'network'

    - name: Debug all vars
      ansible.builtin.debug:
        msg: '{{ hostvars[inventory_hostname] }}'
      when:
        debug | default(false)

  tasks:
    - name: Ensure Splunk is installed
      ansible.builtin.include_role:
        name: cca.splunk.enterprise-install

    - name: Configure server certificate in Splunk
      ansible.builtin.include_role:
        name: cca.splunk.ssl-certificates
        tasks_from:
          server_certificate.yml

    - name: Configure web server certificate in Splunk
      ansible.builtin.include_role:
        name: cca.splunk.ssl-certificates
        tasks_from:
          web_certificate.yml

    - name: Include role to configure outputs certificates
      ansible.builtin.include_role:
        name: cca.splunk.ssl-certificates
        tasks_from:
          outputs_certificate.yml

    - name: Configure settings for Splunk UI
      ansible.builtin.include_role:
        name: cca.splunk.frontend

    - name: Manage Splunk conf settings
      ansible.builtin.include_role:
        name: cca.core.splunk

    - name: Manage settings for the Splunk user profile
      ansible.builtin.include_role:
        name: cca.splunk.user-profile
        tasks_from:
          configure_user_profile.yml


- name: Configure the cluster peers
  hosts: cluster_peers
  become: true
  become_method: ansible.builtin.sudo
  become_user: "{{ splunk_user }}"
  gather_facts: false
  any_errors_fatal: true
  pre_tasks:
    - name: Gather only network facts
      ansible.builtin.setup:
        gather_subset: 'network'

    - name: Debug all vars
      ansible.builtin.debug:
        msg: '{{ hostvars[inventory_hostname] }}'
      when:
        debug | default(false)

  tasks:
    - name: Ensure Splunk is installed
      ansible.builtin.include_role:
        name: cca.splunk.enterprise-install

    - name: Configure server certificate in Splunk
      ansible.builtin.include_role:
        name: cca.splunk.ssl-certificates
        tasks_from:
          server_certificate.yml

    - name: Configure inputs certificate in Splunk
      ansible.builtin.include_role:
        name: cca.splunk.ssl-certificates
        tasks_from:
          inputs_certificate.yml

    - name: Manage Splunk conf settings
      ansible.builtin.include_role:
        name: cca.core.splunk

    - name: Manage settings for the Splunk user profile
      ansible.builtin.include_role:
        name: cca.splunk.user-profile
        tasks_from:
          configure_user_profile.yml

  post_tasks:
    - name: Include post tasks
      ansible.builtin.include_role:
        name: cca.core.control
        tasks_from:
          post_tasks.yml


- name: Check if there is any pending restarts or pushes that needs to be dealt with
  hosts: cluster_managers
  become: true
  become_method: ansible.builtin.sudo
  become_user: "{{ splunk_user }}"
  gather_facts: false
  serial: 1
  any_errors_fatal: true
  pre_tasks:
    - name: Gather only network facts
      ansible.builtin.setup:
        gather_subset: 'network'

    - name: Check if there is any pending actions
      ansible.builtin.include_role:
        name: cca.core.splunk
        tasks_from:
          check_pending_actions.yml

    - name: Restart splunkd if needed
      ansible.builtin.include_role:
        name: cca.core.splunk
        tasks_from:
          restart_splunkd.yml
      when:
        - stat_splunkd_restart_pending.stat.exists

    - name: Check Pre-flight status
      ansible.builtin.include_role:
        name: cca.core.splunk
        tasks_from:
          check_preflight_status.yml
      vars:
        command_retries: "{{ preflight_command_retries }}"
      when:
        - not skip_preflight_check | default(false)

    - name: Perform a cluster-bundle push, validate and handle a rolling restart scenario
      ansible.builtin.include_role:
        name: cca.core.splunk
        tasks_from:
          apply_cluster_bundle.yml
      when:
        - stat_cluster_bundle_push_pending.stat.exists
        - not skip_bundle_push | default(false)

  tasks:

    - name: Re-Check if there is any pending actions
      ansible.builtin.include_role:
        name: cca.core.splunk
        tasks_from:
          check_pending_actions.yml

    - name: Perform a rolling restart of the cluster peers
      ansible.builtin.include_role:
        name: cca.core.splunk
        tasks_from:
          cluster_peer_rolling_restart.yml
      when:
        - stat_rolling_restart_pending.stat.exists

# TODO, add something to the main bundle that will trigger a rolling restart when it's first pushed
  post_tasks:
    - name: Include post tasks
      ansible.builtin.include_role:
        name: cca.core.control
        tasks_from:
          post_tasks.yml


- name: Finalize playbook run on manager server
  hosts: manager
  connection: local
  strategy: linear
  pre_tasks:
    - name: Include finalize task
      ansible.builtin.include_role:
        name: cca.core.control
        tasks_from:
          finalize.yml
      vars:
        target: "cluster_managers-cluster_peers"
