# REPO_TYPE=
# MENU_DESC=Check Automation Readiness
# EXTRA_VARS=
# ansible-playbook -i localhost, playbooks/automation_readiness_cca_manager.yml -v
- name: Automation Readiness Playbook
  hosts: all
  connection: local
  gather_facts: true
  strategy: linear
  any_errors_fatal: false
  pre_tasks:
    - name: Set CCA release version of readiness playbook
      set_fact:
        cca_release: "2024.3.1"

    - name: START - Set target readiness score for CCA manager
      set_fact:
        max_readiness_score: "{{ 3000 if ansible_distribution == 'MacOSX' else 2700 }}"

    - name: Set start score for manager
      set_fact:
        mgr_readiness_score: 0

    - name: Set playbook fact
      set_fact:
        playbook_name: "{{ playbook_dir }}/automation_readiness_cca_manager.yml"

    - name: Collect stats of this file
      stat:
        path: "{{ playbook_name }}"
      register: stat_ansible_playbook

    - name: Check if the CCA Manager has a OS version that is fully supported
      assert:
        that:
          - ( ansible_distribution == 'RedHat' and
              ( ansible_distribution_major_version == '8' or
              ansible_distribution_major_version == '9' ) and
              ansible_architecture == 'x86_64' ) or

            ( ansible_distribution == 'CentOS' and
              ( ansible_distribution_major_version == '8' or
              ansible_distribution_major_version == '9' ) and
              ansible_architecture == 'x86_64' ) or

            ( ansible_distribution == 'Rocky' and
              ( ansible_distribution_major_version == '8' or
              ansible_distribution_major_version == '9' ) and
              ansible_architecture == 'x86_64' ) or

            ( ansible_distribution == 'Ubuntu' and
              ansible_distribution_major_version == '20' and
              ansible_architecture == 'x86_64' ) or

            ( ansible_distribution == 'Amazon' and
              ansible_distribution_major_version == '2023' and
              ansible_architecture == 'x86_64' ) or

            ( ansible_distribution == "OracleLinux" and
              ( ansible_distribution_major_version == "8" or
                ansible_distribution_major_version == "9" ) and
              ansible_architecture == "x86_64" ) or

            ( ansible_distribution == "MacOSX" and
              ( ansible_distribution_major_version == "13" or
                ansible_distribution_major_version == "14" ) and
              ( ansible_architecture == "x86_64" or
                ansible_architecture == "arm64" ) )

        fail_msg: >-
          To currently use all feature of the CCA Manager, the OS version needs to be one of
          the following. RedHat 8-9, CentOS 8-9 Stream, Rocky Linux 8-9, Amazon Linux 2023,
          OracleLinux 8-9 or MacOSX 12-14.
          cca_for_splunk can still be possible to use on other OS and versions, however
          not tested. You are currently on OS ({{ ansible_distribution }}),
          Major Version ({{ ansible_distribution_major_version }}) and ({{ ansible_architecture }})
        success_msg: >-
          OK - Your CCA manager runs a fully supported OS ({{ ansible_distribution }}) and
          Major Version ({{ ansible_distribution_major_version }})
      ignore_errors: true
      register: assert_result

    - name: Increase score for successful task
      set_fact:
        mgr_readiness_score: "{{ mgr_readiness_score | int + 600 }}"
      when:
        not assert_result.failed

    - name: Check ansible version
      connection: local
      assert:
        that:
          - ansible_version.full is version('2.14.12', '>=')
        fail_msg:
          You need to have ansible-core version 2.14.12+ on your control host to use
          the automation framework. Detected version {{ ansible_version.full }}
        success_msg: >-
          You are running an validated ansible version {{ ansible_version.full }}
          in {{ ansible_env.VIRTUAL_ENV | default('no VIRTUAL_ENV, a venv should be configured') }}
      run_once: true
      delegate_to: localhost
      ignore_errors: true
      register: assert_result

    - name: Increase score for successful task
      set_fact:
        mgr_readiness_score: "{{ mgr_readiness_score | int + 200 }}"
      when:
        not assert_result.failed

    - name: Check if virtual env is defined
      connection: local
      assert:
        that:
          - ansible_env.VIRTUAL_ENV is defined
        fail_msg: >-
          To ensure correct version of Python and Ansible, a virtual environment is needed
          Create a virtual environment with python >= 3.11.1 and activate it
        success_msg: >-
          Virtual environment found, continue to validate it
      run_once: true
      delegate_to: localhost
      ignore_errors: true
      register: assert_result

    - name: Increase score for successful task
      set_fact:
        mgr_readiness_score: "{{ mgr_readiness_score | int + 100 }}"
      when:
        not assert_result.failed

    - name: Get Python3 version from virtual environment
      connection: local
      shell:
        cmd: "{{ ansible_env.VIRTUAL_ENV }}/bin/python3 --version | awk '{ print $2 }'"
      register: cca_python3_version_status
      run_once: true
      delegate_to: localhost
      ignore_errors: true

    - name: Check that required Python version is used in the virtual ENV
      assert:
        that:
          - cca_python3_version_status.stdout is version('3.11.1', '>=')
        fail_msg: >-
          You need to have Python3 version 3.11.1+ on your control host to use
          the automation framework. Detected version {{ cca_python3_version_status.stdout }}
        success_msg: >-
          You are running an validated Python3 version {{ cca_python3_version_status.stdout }}
      ignore_errors: true
      register: assert_result

    - name: Increase score for successful task
      set_fact:
        mgr_readiness_score: "{{ mgr_readiness_score | int + 100 }}"
      when:
        not assert_result.failed

    - name: Check if ANSIBLE_PRIVATE_KEY_FILE is defined
      connection: local
      assert:
        that:
          - ansible_env.ANSIBLE_PRIVATE_KEY_FILE is defined
        fail_msg: >-
          Ansible needs a private key file to be able to access splunk infrastructure servers.
          Add you private key to this server and add the env variable in this users profile.
        success_msg: >-
          ENV variable found for ANSIBLE_PRIVATE_KEY_FILE
      run_once: true
      delegate_to: localhost
      ignore_errors: true
      register: assert_result

    - name: Increase score for successful task
      set_fact:
        mgr_readiness_score: "{{ mgr_readiness_score | int + 300 }}"
      when:
        not assert_result.failed

    - name: Check if ANSIBLE_ROLES_PATH is defined
      connection: local
      assert:
        that:
          - ansible_env.ANSIBLE_ROLES_PATH is defined
        fail_msg: >-
          Ansible needs a to proper roles path configured.
          Add the env variable in this users profile and configure according to automation_readiness.md
        success_msg: >-
          ENV variable found for ANSIBLE_ROLES_PATH
      run_once: true
      delegate_to: localhost
      ignore_errors: true
      register: assert_result

    - name: Increase score for successful task
      set_fact:
        mgr_readiness_score: "{{ mgr_readiness_score | int + 100 }}"
      when:
        not assert_result.failed

    - name: Check if ANSIBLE_VAULT_PASSWORD_FILE is defined
      connection: local
      assert:
        that:
          - ansible_env.ANSIBLE_VAULT_PASSWORD_FILE is defined
        fail_msg: >-
          Ansible needs a have a vault password file, add env variable only after files is created.
          Add the env variable in this users profile and configure according to automation_readiness.md
        success_msg: >-
          ENV variable found for ANSIBLE_VAULT_PASSWORD_FILE
      run_once: true
      delegate_to: localhost
      ignore_errors: true
      register: assert_result

    - name: Increase score for successful task
      set_fact:
        mgr_readiness_score: "{{ mgr_readiness_score | int + 200 }}"
      when:
        not assert_result.failed

    - name: Check if ANSIBLE_STRATEGY is defined
      connection: local
      assert:
        that:
          - ansible_env.ANSIBLE_STRATEGY is defined
        fail_msg: >-
          Missing recommended env variable to speed up playbook execution
        success_msg: >-
          ENV variable found for ANSIBLE_STRATEGY
      run_once: true
      delegate_to: localhost
      ignore_errors: true
      register: assert_result

    - name: Increase score for successful recommended task
      set_fact:
        mgr_readiness_score: "{{ mgr_readiness_score | int + 99 }}"
      when:
        not assert_result.failed

    - name: Check if ANSIBLE_STRATEGY_PLUGINS is defined
      connection: local
      assert:
        that:
          - ansible_env.ANSIBLE_STRATEGY_PLUGINS is defined
        fail_msg: >-
          Missing recommended env variable, specify strategy plugin
        success_msg: >-
          ENV variable found for ANSIBLE_STRATEGY_PLUGINS
      run_once: true
      delegate_to: localhost
      ignore_errors: true
      register: assert_result

    - name: Increase score for successful recommended task
      set_fact:
        mgr_readiness_score: "{{ mgr_readiness_score | int + 99 }}"
      when:
        not assert_result.failed

    - name: Check if ANSIBLE_CALLBACKS_ENABLED is defined
      connection: local
      assert:
        that:
          - ansible_env.ANSIBLE_CALLBACKS_ENABLED is defined
        fail_msg: >-
          Missing optional env variable to enable task profiling
        success_msg: >-
          ENV variable found for ANSIBLE_CALLBACKS_ENABLED
      run_once: true
      delegate_to: localhost
      ignore_errors: true
      register: assert_result

    - name: Increase score for successful optional task
      set_fact:
        mgr_readiness_score: "{{ mgr_readiness_score | int + 50 }}"
      when:
        not assert_result.failed


    - name: Check if ANSIBLE_STDOUT_CALLBACK is defined
      connection: local
      assert:
        that:
          - ansible_env.ANSIBLE_STDOUT_CALLBACK is defined
        fail_msg: >-
          Missing optional env variable to change task output.
        success_msg: >-
          ENV variable found for ANSIBLE_STDOUT_CALLBACK
      run_once: true
      delegate_to: localhost
      ignore_errors: true
      register: assert_result

    - name: Increase score for optional successful task
      set_fact:
        mgr_readiness_score: "{{ mgr_readiness_score | int + 50 }}"
      when:
        not assert_result.failed

    - name: Check if we have a cca directories for splunk infrastructure config
      shell:
        cmd: 'find {{ playbook_dir }}/../../.. -name "settings" -type f ! -path "*templates*" ! -path "*users*" -exec grep "repo_type=infra" {} \; -print | rev | cut -d"/" -f3 | rev | grep -v repo_type'
      register:
        cca_infrastructure_companion_directory
      failed_when: cca_infrastructure_companion_directory.rc > 1
      ignore_errors: true

    - name: Assert that a infrastructure directory exists
      connection: local
      assert:
        that:
          - cca_infrastructure_companion_directory.rc == 0
        fail_msg: >-
          A companion directory for Splunk Infrastructure is missing
        success_msg: >-
         Found a CCA Splunk Infrastructure directory
      run_once: true
      delegate_to: localhost
      ignore_errors: true
      register: assert_result

    - name: Increase score for successful task
      set_fact:
        mgr_readiness_score: "{{ mgr_readiness_score | int + 300 }}"
      when:
        not assert_result.failed

    - name: Check if we have a cca directories for splunk onboarding config
      shell:
        cmd: 'find {{ playbook_dir }}/../../.. -name "settings" -type f ! -path "*templates*" ! -path "*users*" -exec grep "repo_type=onboarding" {} \; -print | rev | cut -d"/" -f3 | rev | grep -v repo_type'
      register:
        cca_onboarding_companion_directory
      failed_when: cca_onboarding_companion_directory.rc > 1
      ignore_errors: true

    - name: Assert that a onboarding directory exists
      connection: local
      assert:
        that:
          - cca_onboarding_companion_directory.rc == 0
        fail_msg: >-
          A companion directory for Splunk Onboarding is missing
        success_msg: >-
         Found a CCA Splunk Onboarding directory
      run_once: true
      delegate_to: localhost
      ignore_errors: true
      register: assert_result

    - name: Increase score for successful task
      set_fact:
        mgr_readiness_score: "{{ mgr_readiness_score | int + 300 }}"
      when:
        not assert_result.failed

    - name: When setup wizard is completed, we should have access to an Splunk Enterprise tgz file in infrastructure repo
      shell:
        cmd: 'find {{ playbook_dir }}/../../../ -path "*{{ cca_infrastructure_companion_directory.stdout.splitlines() | first | default("~/cca_splunk_infrastructure") }}*" -name "splunk-[8|9]*-Linux-x86_64.tgz" -type f'
      register: splunk_enterprise_tgz
      ignore_errors: true

    - name: Assert that a Splunk enterprise file exists in infrastructure repo
      connection: local
      assert:
        that:
          - splunk_enterprise_tgz.rc == 0
          - splunk_enterprise_tgz.stdout != ""
        fail_msg: >-
          A Splunk enterprise tgz file is missing
        success_msg: >-
         Found a Splunk enterprise file
      run_once: true
      delegate_to: localhost
      ignore_errors: true
      register: assert_result
      when:
        - cca_infrastructure_companion_directory.rc == 0

    - name: Increase score for successful task
      set_fact:
        mgr_readiness_score: "{{ mgr_readiness_score | int + 202 }}"
      when:
        - not assert_result.failed | default(true)
        - cca_infrastructure_companion_directory.rc == 0

    - name: Test existence of commands on macOS
      command: "which {{ item }}"
      loop:
        - bash
        - basename
        - readlink
        - dirname
        - git
        - gsed
        - tput
        - rsync
        - wget
        - getopt
        - test
        - whiptail
        - md5sum
      register: command_results
      changed_when: false
      failed_when: false
      when:
        - ansible_distribution == 'MacOSX'

    - name: Create list of command results
      set_fact:
        command_list: "{{ command_list | default([]) + [{ 'name': item.item, 'exists': item.rc == 0 }] }}"
      loop: "{{ command_results.results }}"
      loop_control:
        label: "{{ item.item }}"
      no_log: true
      when:
        - ansible_distribution == 'MacOSX'

    - name: Assert command existence
      assert:
        that:
          - command_list | map(attribute='exists') | list | difference([true]) == []
        fail_msg: >-
          One or more commands do not exist: {{ command_list | selectattr('exists', 'equalto', false) | map(attribute='name') | list }}.
          Install and configure required packages with
          "brew install bash coreutils git git-lfs gnu-getopt gnu-sed gnu-tar ncurses newt rsync wget md5sha1sum"
        success_msg: "All required commands exist on MacOS"
      register: assert_result
      when:
        - ansible_distribution == 'MacOSX'

    - name: Increase score for successful task
      set_fact:
        mgr_readiness_score: "{{ mgr_readiness_score | int + 300 }}"
      when:
        - not assert_result.failed | default(true)
        - ansible_distribution == 'MacOSX'

    - name: END - Evaluate automation readiness score
      assert:
        that:
          - not mgr_readiness_score | int < max_readiness_score | int
        fail_msg: >-
          Your Manager readiness score is {{ mgr_readiness_score }} out of {{ max_readiness_score }}.
          Please review the output and the documentation on how to improve your automation
          readiness, so that you can start using CCA for Splunk from this host.
          Readiness score: {{ mgr_readiness_score }}.
          CCA Release: {{ cca_release }}. Ansible Playbook has checksum {{ stat_ansible_playbook.stat.checksum }}.
        success_msg: >-
          Good work, your manager host looks great, you are ready to start utilizing CCA for Splunk!
          Readiness score: {{ mgr_readiness_score }} out of {{ max_readiness_score }}.
          CCA Release: {{ cca_release }}. Ansible Playbook has checksum {{ stat_ansible_playbook.stat.checksum }}.
      register: readiness_score
      ignore_errors: true

    - name: Post this summary
      debug:
        msg: "{{ readiness_score.msg }}"
