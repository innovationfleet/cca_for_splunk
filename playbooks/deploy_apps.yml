# Playbook to deploy etc/apps to Splunk instances
#
# REPO_TYPE=onboarding
# MENU_DESC=Deploy apps to Splunk Instances
# EXTRA_VARS=hide_password(true)

- name: Initialize playbook run on manager server - Deploy Apps
  hosts: manager
  connection: local
  strategy: linear
  any_errors_fatal: true
  pre_tasks:
    - name: Initialize deploy apps on manager
      ansible.builtin.include_role:
        name: cca.core.control
        tasks_from:
          initialize.yml
      vars:
        target: "deploy_apps"

# Deploy etc/apps to Splunk servers
- name: Deploy etc/apps to Splunk servers AG1
  hosts: ~.*forwarders:&ag1
  become: true
  become_method: sudo
  become_user: "{{ splunk_user }}"
  gather_facts: false
  any_errors_fatal: true
  vars:
    deploy_scope: "apps"
  pre_tasks:
    - name: Include tasks to wait for connection to host
      ansible.builtin.include_role:
        name: cca.core.splunk
        tasks_from:
          wait_for_connection.yml

    - name: Gather network facts
      ansible.builtin.setup:
        gather_subset: 'network'

    - name: Pre deployment tasks
      ansible.builtin.include_role:
        name: cca.core.control
        tasks_from:
          pre_deployment_tasks.yml

  tasks:
    - name: Onboarding role
      ansible.builtin.include_role:
        name: cca.splunk.onboarding

  post_tasks:
    - name: Check if there is any pending actions
      ansible.builtin.include_role:
        name: cca.core.splunk
        tasks_from:
          check_pending_actions.yml

    - name: Restart splunkd if needed
      ansible.builtin.include_role:
        name: cca.core.splunk
        tasks_from:
          restart_splunkd.yml
      when:
        - stat_splunkd_restart_pending.stat.exists

    - name: Post deployment tasks
      ansible.builtin.include_role:
        name: cca.core.control
        tasks_from:
          post_deployment_tasks.yml

# Deploy etc/app to Splunk servers
- name: Deploy etc/app to Splunk servers AG2
  hosts: ~.*forwarders:&ag2
  become: true
  become_method: sudo
  become_user: "{{ splunk_user }}"
  gather_facts: false
  any_errors_fatal: true
  vars:
    deploy_scope: "apps"
  pre_tasks:
    - name: Include tasks to wait for connection to host
      ansible.builtin.include_role:
        name: cca.core.splunk
        tasks_from:
          wait_for_connection.yml

    - name: Gather network facts
      ansible.builtin.setup:
        gather_subset: 'network'

    - name: Pre deployment tasks
      ansible.builtin.include_role:
        name: cca.core.control
        tasks_from:
          pre_deployment_tasks.yml

  tasks:
    - name: Onboarding role
      ansible.builtin.include_role:
        name: cca.splunk.onboarding

  post_tasks:
    - name: Check if there is any pending actions
      ansible.builtin.include_role:
        name: cca.core.splunk
        tasks_from:
          check_pending_actions.yml

    - name: Restart splunkd if needed
      ansible.builtin.include_role:
        name: cca.core.splunk
        tasks_from:
          restart_splunkd.yml
      when:
        - stat_splunkd_restart_pending.stat.exists

    - name: Post deployment tasks
      ansible.builtin.include_role:
        name: cca.core.control
        tasks_from:
          post_deployment_tasks.yml

# Deploy etc/app to Splunk servers
- name: Deploy etc/app to Splunk servers AG3
  hosts: ~.*forwarders:&ag3
  become: true
  become_method: sudo
  become_user: "{{ splunk_user }}"
  gather_facts: false
  any_errors_fatal: true
  vars:
    deploy_scope: "apps"
  pre_tasks:
    - name: Include tasks to wait for connection to host
      ansible.builtin.include_role:
        name: cca.core.splunk
        tasks_from:
          wait_for_connection.yml

    - name: Gather network facts
      ansible.builtin.setup:
        gather_subset: 'network'

    - name: Pre deployment tasks
      ansible.builtin.include_role:
        name: cca.core.control
        tasks_from:
          pre_deployment_tasks.yml

  tasks:
    - name: Onboarding role
      ansible.builtin.include_role:
        name: cca.splunk.onboarding

  post_tasks:
    - name: Check if there is any pending actions
      ansible.builtin.include_role:
        name: cca.core.splunk
        tasks_from:
          check_pending_actions.yml

    - name: Restart splunkd if needed
      ansible.builtin.include_role:
        name: cca.core.splunk
        tasks_from:
          restart_splunkd.yml
      when:
        - stat_splunkd_restart_pending.stat.exists

    - name: Post deployment tasks
      ansible.builtin.include_role:
        name: cca.core.control
        tasks_from:
          post_deployment_tasks.yml

# Deploy etc/app to Splunk servers
- name: Deploy etc/app to Splunk servers
  hosts: non_clustered_splunk_servers:searchhead_deployers:cluster_managers:!deployment_servers:!forwarders
  become: true
  become_method: sudo
  become_user: "{{ splunk_user }}"
  gather_facts: false
  any_errors_fatal: true
  vars:
    deploy_scope: "apps"
  pre_tasks:
    - name: Include tasks to wait for connection to host
      ansible.builtin.include_role:
        name: cca.core.splunk
        tasks_from:
          wait_for_connection.yml

    - name: Gather network facts
      ansible.builtin.setup:
        gather_subset: 'network'

    - name: Pre deployment tasks
      ansible.builtin.include_role:
        name: cca.core.control
        tasks_from:
          pre_deployment_tasks.yml

  tasks:
    - name: Onboarding role
      ansible.builtin.include_role:
        name: cca.splunk.onboarding

  post_tasks:
    - name: Check if there is any pending actions
      ansible.builtin.include_role:
        name: cca.core.splunk
        tasks_from:
          check_pending_actions.yml

    - name: Restart splunkd if needed
      ansible.builtin.include_role:
        name: cca.core.splunk
        tasks_from:
          restart_splunkd.yml
      when:
        - stat_splunkd_restart_pending.stat.exists

    - name: Post deployment tasks
      ansible.builtin.include_role:
        name: cca.core.control
        tasks_from:
          post_deployment_tasks.yml

# Finalize playbook run on manager server
- name: Finalize playbook run on manager server
  hosts: manager
  connection: local
  strategy: linear
  pre_tasks:
    - name: Finalize deploy apps on manager
      ansible.builtin.include_role:
        name: cca.core.control
        tasks_from:
          finalize.yml
      vars:
        target: "deploy_apps"
